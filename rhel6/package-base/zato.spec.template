Name:           zato
Version:        ZATO_VERSION
Release:        ZATO_RELEASE
Summary:        The next generation ESB and application server. Open-source. In Python

Group:          ESB
License:        LGPL
URL:            http://zato.io
BuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)
Requires(pre): /usr/sbin/useradd, /usr/bin/getent
Requires(postun): /usr/sbin/userdel

AutoReqProv: no

Requires: tix, suitesparse, openssl, postgresql-libs, zlib, libevent, m2crypto, numpy, scipy, git, bzr, haproxy, atlas, libgfortran, lapack, swig, uuid, libxslt
Provides: %{name} = %{version}-%{release}



%description
Zato - The next generation ESB and application server written in Python and released under 
a commercial-friendly LGPL license. Think:
» Increased productivity
» Painless rollouts with less downtime
» Out of the box support for HTTP, JSON, SOAP, Redis, AMQP, JMS WebSphere MQ, ZeroMQ, FTP, SQL, 
  hot-deployment, job scheduling, statistics, high-availability load balancing and more
» Slick web admin GUI, CLI and API
» Awesome documentation
» 24x7 commercial support and training
» Growing community around the project

%pre
if [ "$1" = 1 ] ; then
/usr/bin/getent group zato || /usr/sbin/groupadd zato
/usr/bin/getent passwd zato || /usr/sbin/useradd -g zato -d /opt/zato -s /bin/bash zato
fi

ZATO_BACKUP_DIR=/opt/zato/backup
ZATO_DATE=`date +%Y%m%d_%T`
ZATO_PATTERNS="/opt/zato/2.* /opt/zato/3.* /opt/zato/4.* /opt/zato/5.* /opt/zato/6.* /opt/zato/7.* /opt/zato/8.* /opt/zato/9.*"
if [ ! -d "$ZATO_BACKUP_DIR" ]; then
    mkdir -p $ZATO_BACKUP_DIR
fi
for directory in $ZATO_PATTERNS; do
 if [ -d "$directory" ]; then
    cp -R $directory $ZATO_BACKUP_DIR/${directory##*/}_$ZATO_DATE
 fi
done

exit 0

%preun
if [ $1 = 0 ]; then
/etc/init.d/zato stop
fi

exit 0

%postun
if [ "$1" = 0 ] ; then
 rm -rf /opt/%{name}/%{version}
 rm -rf /opt/zato/current
 rm -rf /etc/bash_completion.d/zato
 rm -rf /etc/init.d/zato
 rm -rf /etc/rc0.d/K99zato
 rm -rf /etc/rc1.d/K99zato
 rm -rf /etc/rc2.d/S99zato
 rm -rf /etc/rc3.d/S99zato
 rm -rf /etc/rc4.d/S99zato
 rm -rf /etc/rc5.d/S99zato
 rm -rf /etc/rc6.d/K99zato
 rm -rf /etc/systemd/system/multi-user.target.wants/zato.service
 rm -rf /etc/zato
 rm -rf /lib/systemd/system/zato.service
 rm -rf /opt/zato/.zato-path
 /usr/sbin/userdel zato
else
 rm -rf /opt/%{name}/%{version}
 rm -rf /opt/zato/current
fi
exit 0

%prep

%files
%defattr(-,zato,zato,-)
/etc/bash_completion.d/zato
/etc/init.d/zato
/etc/rc0.d/K99zato
/etc/rc1.d/K99zato
/etc/rc2.d/S99zato
/etc/rc3.d/S99zato
/etc/rc4.d/S99zato
/etc/rc5.d/S99zato
/etc/rc6.d/K99zato
/etc/zato/components-enabled/README
/etc/systemd/system/multi-user.target.wants/zato.service
/lib/systemd/system/zato.service

/opt/zato

%post

if ! grep -q /opt/zato/current /opt/zato/.bashrc; then
    echo "export PATH
PATH="/opt/zato/current/code/bin:$PATH"">>/opt/zato/.bashrc
fi
if [ -h "/opt/zato/current" ]; then
    rm -rf /opt/zato/current
    ln -s /opt/zato/ZATO_VERSION /opt/zato/current
else
    ln -s /opt/zato/ZATO_VERSION /opt/zato/current
fi

if ! grep -q bash_completion /opt/zato/.bashrc; then
echo ". /etc/bash_completion.d/zato">>/opt/zato/.bashrc
fi

source /opt/zato/.bashrc


%changelog
* Sun Jun 02 2013  dsuch (at) zato.io
- Unified installer for Ubuntu, Mint, Fedora and OS X
- Added the zato check-config command
- Fixed a bug which lead to double execution of user-defined scheduler jobs
- Made quickstart clusters more robust when confronted with improperly configured servers, sanity checks are now performed before servers are started
- Changed the default value of main.deployment_lock_expires so it works on 32-bit systems without a need for reconfiguring servers after they’re created
- Made scripts generated by zato quickstart relocatable
- Newly created servers start CPU_COUNT gunicorn workers by default now, not CPU_COUNT * 2 as previously
- HAProxy load-balancer can now bind to all interfaces. Patch provided by Myroslav Opyr (quintagroup.com).